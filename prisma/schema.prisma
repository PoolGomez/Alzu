generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String            @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  accounts           Account[]
  createdCompanies   Company[]         @relation("CompanyCreator")
  companiesUserRoles CompanyUserRole[]
  Order              Order[]
  subcriptions       UserSubcription?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

model ResetPasswordToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

model Company {
  id         String            @id @default(cuid())
  name       String
  ownerId    String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  categories Category[]
  owner      User              @relation("CompanyCreator", fields: [ownerId], references: [id])
  roles      CompanyRole[]
  users      CompanyUserRole[]
  orders     Order[]
  products   Product[]
  rooms      Room[]
  tables     Table[]
}

model Subcription {
  id           String            @id @unique
  name         String
  maxCompanies Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  subcriptions UserSubcription[]
}

model UserSubcription {
  id            String      @id @default(uuid())
  userId        String      @unique
  subcriptionId String
  maxCompanies  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subcription   Subcription @relation(fields: [subcriptionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, subcriptionId])
}

model CompanyRole {
  id          String             @id @default(uuid())
  name        String
  description String
  permissions PermissionAction[]
  companyId   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  company     Company            @relation(fields: [companyId], references: [id])
  users       CompanyUserRole[]

  @@unique([companyId, name])
}

model CompanyUserRole {
  id        String      @id @default(uuid())
  userId    String
  companyId String
  roleId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  company   Company     @relation(fields: [companyId], references: [id])
  role      CompanyRole @relation(fields: [roleId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String
  isAvailable Boolean   @default(true)
  company     Company   @relation(fields: [companyId], references: [id])
  products    Product[]

  @@unique([companyId, name])
}

model Product {
  id          String      @id @default(cuid())
  companyId   String
  categoryId  String
  name        String
  description String
  isAvailable Boolean     @default(true)
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  price       Float
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  company     Company     @relation(fields: [companyId], references: [id])
}

model OrderItem {
  id        String          @id @default(uuid())
  quantity  Int
  price     Int
  subtotal  Int
  productId String
  tableId   String
  status    OrderItemStatus
  companyId String
  product   Product         @relation(fields: [productId], references: [id])
  table     Table           @relation(fields: [tableId], references: [id])
}

model Order {
  id        String      @id @default(uuid())
  companyId String
  roomId    String
  tableId   String
  userId    String?
  total     Int
  notes     String?
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  company   Company     @relation(fields: [companyId], references: [id])
  user      User?       @relation(fields: [userId], references: [id])
  Table     Table[]     @relation("OrderToTable")
}

model Room {
  id          String   @id @default(uuid())
  name        String
  companyId   String
  isAvailable Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  tables      Table[]
}

model Table {
  id          String      @id @default(uuid())
  status      TableStatus
  roomId      String
  companyId   String
  isAvailable Boolean
  name        String
  orderItem   OrderItem[]
  company     Company     @relation(fields: [companyId], references: [id])
  room        Room        @relation(fields: [roomId], references: [id])
  orders      Order[]     @relation("OrderToTable")
}

enum PermissionAction {
  VIEW_DASHBOARD
  VIEW_PRODUCTS
  CREATE_PRODUCT
  EDIT_PRODUCT
  DELETE_PRODUCT
  VIEW_CATEGORIES
  CREATE_CATEGORY
  EDIT_CATEGORY
  DELETE_CATEGORY
  VIEW_PRESENTATIONS
  CREATE_PRESENTATION
  EDIT_PRESENTATION
  DELETE_PRESENTATION
  VIEW_ORDERS
  CREATE_ORDER
  EDIT_ORDER
  DELETE_ORDER
  VIEW_ROOMS
  CREATE_ROOM
  EDIT_ROOM
  DELETE_ROOM
  VIEW_TABLES
  CREATE_TABLE
  EDIT_TABLE
  DELETE_TABLE
  SELL
}

enum OrderItemStatus {
  CREATED
  IN_PROGRESS
  SERVED
  CANCELED
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  SERVED
  CANCELED
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  DISABLED
}
