// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// enum Role {
//   user
//   admin
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  // role          Role      @default(user)
  accounts      Account[]
  // sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companiesUserRoles CompanyUserRole[] 
  subcriptions UserSubcription[]
  createdCompanies Company[] @relation("CompanyCreator") // Relación inversa
  
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

model ResetPasswordToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }

model Company {
  id        String   @id @default(cuid())
  name      String
  ownerId    String  //session user id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User  @relation("CompanyCreator", fields: [ownerId], references:[id])
  users CompanyUserRole[] // Relación con los usuarios que tienen acceso a la empresa
  roles CompanyRole[]
}

model Subcription {
  id String @unique  //FREE , BASIC, PREMIUM, CUSTOM
  name String
  maxCompanies Int //limite de empresas que puede crear

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([id])
  subcriptions UserSubcription[]
}

model UserSubcription {
  id String @id @default(uuid())
  userId String @unique
  subcriptionId String
  maxCompanies Int // Límite de empresas que puede crear

  user     User    @relation(fields: [userId], references: [id])
  subcription Subcription @relation(fields:[subcriptionId], references:[id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, subcriptionId])
}

model CompanyRole {
  id          String        @id @default(uuid())
  name        String       
  description String?
  permissions PermissionAction[] //Json // Almacena los permisos como JSON para rápido acceso
  companyId    String
  company      Company      @relation(fields: [companyId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users CompanyUserRole[]
  @@unique([companyId, name])
  
}

model CompanyUserRole {
  id        String @id @default(uuid())

  userId    String
  companyId String
  roleId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])
  role      CompanyRole @relation(fields: [roleId], references: [id])

  @@unique([userId, companyId]) //Un usuario no puede estar dos veces en la misma empresa

}

enum PermissionAction {
  VIEW_DASHBOARD

  VIEW_PRODUCTS
  CREATE_PRODUCT
  EDIT_PRODUCT
  DELETE_PRODUCT

  VIEW_CATEGORIES
  CREATE_CATEGORY
  EDIT_CATEGORY
  DELETE_CATEGORY

  VIEW_PRESENTATIONS
  CREATE_PRESENTATION
  EDIT_PRESENTATION
  DELETE_PRESENTATION

  VIEW_ORDERS
  CREATE_ORDER
  EDIT_ORDER
  DELETE_ORDER

  VIEW_ROOMS
  CREATE_ROOM
  EDIT_ROOM
  DELETE_ROOM

  VIEW_TABLES
  CREATE_TABLE
  EDIT_TABLE
  DELETE_TABLE
  
  VIEW_COMPANY
}

// model Permission {
//   id String @id @default(cuid())
//   name String @unique
//   category String
//   title Boolean
//   text String
//   // roleId String
//   roles Role[] // @relation("RolePermissions",references:[id])
  
// }